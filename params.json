{"name":"Go5","tagline":"golang timer panic recover","body":"`go定时器以及panic recover的解析`\r\n\r\ngo定时器的实现:\r\n====\r\n\r\n### 原理:   \r\n   使用select和无缓冲的chan的机制来进行构建定时器.首先select会去选择多个case中满足条件的一个来执行.\r\n### 注意:    \r\n   当多个case都满足条件的时候,其只会随机的执行其中的一个case.\r\n\r\n```c\r\npackage main\r\n\r\nimport \"time\"\r\n\r\nfunc timer(input chan int) {\r\n    t1 := time.NewTimer(time.Second * 5)//每隔5秒钟向t1的chan中写数据\r\n    t2 := time.NewTimer(time.Second * 10) \r\n    for {\r\n        select {\r\n        case msg := <-input:\r\n            println(msg)\r\n        case <-t1.C:\r\n            println(\"5s timer\")\r\n            t1.Reset(time.Second * 5)\r\n        case <-t2.C:\r\n            println(\"10s timer\")\r\n            t2.Reset(time.Second * 10) \r\n        }\r\n    }   \r\n}\r\n\r\nfunc main(){\r\n    cf := make(chan int)\r\n\r\n    go timer(cf)\r\n    cf <- 123 \r\n    time.Sleep(100*time.Second)\r\n}\r\n\r\n```\r\n\r\ngo的异常处理机制:\r\n====\r\n\r\ngo的异常处理一般使用panic来抛出程序异常,使用recover进行捕获异常.  \r\n\r\n```c   \r\n\r\npackage main\r\n\r\nimport \"fmt\"\r\n\r\n\r\nfunc main() {\r\n    defer func() {          //注意必须要先声明defer，否则不能捕获到panic异常\r\n    fmt.Println(\"recover start\")\r\n    if err := recover(); err != nil {\r\n        fmt.Println(err)    \r\n    }   \r\n        fmt.Println(\"recover end\")\r\n    }() \r\n    \r\n    f() \r\n}\r\n\r\n\r\nfunc f() {\r\n    fmt.Println(\"main start\")\r\n    panic(\"panic error\")\r\n    fmt.Println(\"main end\")\r\n}\r\n\r\n```\r\n\r\n`output:`   \r\n\r\n```   \r\nmain start\r\nrecover start\r\npanic error\r\nrecover end\r\n```\r\n\r\n\r\n\r\n\r\n欢迎一起交流学习 \r\n====\r\n \r\n在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流\r\n\r\n* 邮件(1031379296#qq.com, 把#换成@)\r\n* QQ: 1031379296\r\n* weibo: [@王发康](http://weibo.com/u/2786211992/home)\r\n\r\n\r\nThx\r\n====\r\n\r\n* chunshengsterATgmail.com\r\n\r\n\r\nAuthor\r\n====\r\n* Linux\\nginx\\golang\\c\\c++爱好者\r\n* 欢迎一起交流  一起学习# \r\n* Others say good and Others good\r\n\r\n\r\n","google":"golang timer panic recover 定时器 异常处理","note":"Don't delete this file! It's used internally to help with page regeneration."}